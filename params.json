{
  "name": "CasPHP",
  "tagline": "Clear and Straight forward PHP Web Framework",
  "body": "## Introduction\r\n\r\nClear And Straight-forward PHP Webapp Framework\r\n\r\nIt helps developers quickly write simple and powerful web application & APIs. Emphasizing in cleanliness and simplicity minimizes the duration of understanding framework and allows user start his first line of codes quickly.\r\n\r\n### Features\r\n\r\n* Powerful router\r\n    * Standard and custom HTTP methods\r\n    * Route parameters with wildcards and conditions\r\n    * Route redirect\r\n    * RESTful web service\r\n* Template rendering with custom views\r\n* Simple configuration\r\n\r\n## Getting started\r\n\r\n### Web server\r\n\r\n#### Apache\r\n\r\nEnsure the `.htaccess` and `index.php` files are in the same public-accessible directory. The `.htaccess` file\r\nshould contain this code:\r\n\r\n    RewriteEngine On\r\n    RewriteCond %{REQUEST_FILENAME} !-f\r\n    RewriteRule ^ index.php [QSA,L]\r\n\r\nAdditionally, make sure your virtual host is configured with the AllowOverride option so that the .htaccess rewrite rules can be used:\r\n\r\nAllowOverride All\r\n   \r\n#### Google app engine\r\n\r\nTwo steps are required to successfully run your web application on Google App Engine. First, ensure the `app.yaml` file includes a default handler to `index.php`:\r\n\r\n    application: your-app-name\r\n    version: 1\r\n    runtime: php\r\n    api_version: 1\r\n    \r\n    handlers:\r\n    # ...\r\n    - url: /.*\r\n      script: public_html/index.php\r\n\r\n### Configuration\r\n\r\nIf you place the working directory `index.php` inside a folder in server root, re-define `WORK_DIR` with your `/folder-name`. For production environment, change `ENV` to `live`. Model-View-Controller (MVC) folder name are also allowed to change.\r\n\r\n/config/inc.config.php:\r\n\r\n    define('ENV', 'live');\r\n    define('WORK_DIR', '/casphp');\r\n    define('ROUTER_ROOT', M_ROOT.'/controller');\r\n    define('MODEL_ROOT', M_ROOT.'/model');\r\n    define('TEMPLATE_DIR_NAME', '/templates');\r\n    define('TEMPLATE_TYPE', '/default');\r\n    define('TEMPLATE_ASSET', '/_include');\r\n    \r\n### MVC Structure\r\n\r\n#### Controller\r\n\r\nDefault sub-folder name and file name are `public` and `index` respectively. Child-config file that is located inside each sub-folder will be executed first. The file name must be same as its parent folder name `inc.sub-folder-name.php`.\r\n\r\n/controller/api/inc.api.php\r\n\r\n    try{\r\n        //config file that loads before main file\r\n    }\r\n    catch(exception $e){\r\n        switch($e->getCode()){\r\n            //bad request\r\n            default:\r\n                $app->setStatus('400');\r\n                echo $app->getMessageForCode('400');\r\n                break;\r\n        }\r\n\r\n        exit;\r\n    }\r\n    \r\n/controller/api/index.php\r\n\r\n    $app->post('/login/:param', function ($param) use ($app) {\r\n        $header = $app->getHeaders(); //header data\r\n        $post = $app->postRequest(); //post data\r\n        $get = $app->getRequest(); //get data\r\n    \r\n        $feedback = array(\r\n            'header' => $header,\r\n            'get' => $get,\r\n            'post' => $post,\r\n            'param' => $param,\r\n        );\r\n        \r\n        $app->setStatus('200');\r\n        $app->contentType('application/json');\r\n        echo json_encode($feedback);\r\n    });\r\n\r\n#### Model\r\n\r\nClasses must be registered via `spl_autoload_register` in root file `inc.include.php` to define its location. \r\n\r\n    spl_autoload_register(function ($class) {\r\n        $classname = strtolower($class);\r\n        if(strstr($classname, 'core') !== false){\r\n            $path = MODEL_ROOT . '/core';\r\n            include($path . '/' . $class . '.class.php');\r\n        }\r\n        elseif(strstr($classname, 'util') !== false){\r\n            $path = MODEL_ROOT . '/util';\r\n            include($path . '/' . $class . '.class.php');\r\n        }\r\n    });\r\n\r\n#### View\r\n\r\nTemplates are accessible via controller file. `TEMPLATE_TYPE` (@see Configuration) can be used to separate your template version.\r\n\r\nBy default, `TEMPLATE_DIR_NAME` and `TEMPLATE_TYPE` are set `/templates` and `/default` respectively and the file path will be `/root/templates/default`.\r\n    \r\n    $app->notFound(function () use ($app) {\r\n        $app->render('/404.html'); //relative path\r\n    });\r\n    \r\n    $app->get('/', function () use ($app) {\r\n        $app->render('/public/index.html'); //relative path\r\n    });\r\n    \r\n`<%include_path%>` is used to substitute the absolute path of assets. `TEMPLATE_ASSET` (@see Configuration) is changeable for different folder name.\r\n\r\n    <script src=\"<%include_path%>/js/main.js\"></script>\r\n    \r\n`<%%template-path%%>` is used to nest more template files together in order to effectively re-use the same template. It uses underscore (_) to separate the directory level.\r\n    \r\n    <%%public_include_document-head.html%%>\r\n    <%%public_include_header.html%%>\r\n    <div class=\"container\">\r\n        Hi CasPHP\r\n    </div>\r\n    <%%public_include_footer.html%%>\r\n\r\n## How can I contribute?\r\n\r\n* Fork it to become yours\r\n* Make your changes to improve\r\n* Submit pull request and let's discuss on your efforts\r\n* I will merge it as you rock it!\r\n\r\n## Credits\r\n\r\n* Slim Framework v2.6.1 (http://www.slimframework.com)\r\n* Neo Wong\r\n\r\n## License\r\n\r\nThe CasPHP Framework is released under the MIT public license.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}